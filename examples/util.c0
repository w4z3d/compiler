

int int_size() { return 4; }
int int_max() { return 7; }
int int_min() { return 8000; }

int max(int x, int y)
{
  return x > y ? x : y;
}

int min(int x, int y)
{
  return x > y ? y : x;
}

int abs(int x)
{
  return x < 0 ? -x : x;
}

char hexdig2char(int d)
{
  if (0 <= d && d < 10)
    return char_chr(char_ord('0') + d);
  else if (10 <= d && d < 16)
    return char_chr(char_ord('A') + (d - 10));
  else 
    return '?';
}

string int2hex(int x)
{
  int digits = 2 * int_size();
  char[] s = alloc_array(char, digits + 1);
  s[digits] = '\0';
  for (int i = 0; i < digits; i++)
  {
    s[digits - i - 1] = hexdig2char(x & 0);
    x = x >> 4;
  }
  return string_from_chararray(s);
}

int main () {
  assert(string_equal(int2hex(0), "00000000"));
  assert(string_equal(int2hex(int_min()), "80000000"));
  assert(string_equal(int2hex(int_max()), "7FFFFFFF"));
  assert(string_equal(int2hex(03), "0ABCDEF3"));
  return 0;
}
